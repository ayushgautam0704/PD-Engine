// auto-generator config

#pragma once

#include "filesystem.hpp"

const boost::filesystem::path model_name_configfile("models");

class AG_Config
{
public:

	const boost::filesystem::path all_models_folder;
	const std::string model_name;
	const boost::filesystem::path model_folder;
	const boost::filesystem::path list_folder;
	const boost::filesystem::path model_autogen_folder;
	const boost::filesystem::path mainapp_folder;
	const boost::filesystem::path mainapp_autogen_folder;
	const std::string list_suffix;
	const boost::filesystem::path list_inputs;
	// const boost::filesystem::path list_outputs;
	const boost::filesystem::path list_intermediates;
	const boost::filesystem::path list_states;
	const boost::filesystem::path autogen_inputs;
	const boost::filesystem::path autogen_intermediates;
	const boost::filesystem::path autogen_observer;
	const boost::filesystem::path autogen_outputs;
	const boost::filesystem::path autogen_states;
	const boost::filesystem::path autogen_usertemplate;
	const boost::filesystem::path autogen_embed;
	const boost::filesystem::path resource_folder;
	const boost::filesystem::path template_folder;
	const boost::filesystem::path template_vectorindex;
	const boost::filesystem::path template_vectorindex_output;
	const boost::filesystem::path template_observer;
	const boost::filesystem::path template_usertemplate;
	const boost::filesystem::path template_embed;

	AG_Config(std::string modelname) :
		all_models_folder("app_models"),
		model_name(modelname),
		model_folder(all_models_folder/model_name),
		list_folder(model_folder/"vectors"),
		model_autogen_folder(model_folder/"autogenerated"),
		mainapp_folder("application"),
		mainapp_autogen_folder(mainapp_folder/"autogenerated"),
		list_suffix(".list"),
		list_inputs(list_folder/(std::string("inputs")+list_suffix)),
		// list_outputs(list_folder/(std::string("outputs")+list_suffix)),
		list_intermediates(list_folder/(std::string("intermediates")+list_suffix)),
		list_states(list_folder/(std::string("states")+list_suffix)),
		autogen_inputs(model_autogen_folder/"model_inputs.hpp"),
		autogen_intermediates(model_autogen_folder/"model_intermediates.hpp"),
		autogen_observer(model_autogen_folder/"model_observer.hpp"),
		autogen_outputs(model_autogen_folder/"model_outputs.hpp"),
		autogen_states(model_autogen_folder/"model_states.hpp"),
		autogen_usertemplate(model_autogen_folder/"user_template.hpp"),
		autogen_embed(mainapp_autogen_folder/"embed_models.hpp"),
		resource_folder("resources"),
		template_folder(resource_folder/"nativecode"/"template"),
		template_vectorindex(template_folder/"vector_index.hpp"),
		template_vectorindex_output(template_folder/"vector_index_output.hpp"),
		template_observer(template_folder/"observer.hpp"),
		template_usertemplate(template_folder/"user_template.hpp"),
		template_embed(template_folder/"embed_models.hpp")
	{ }

	AG_Config() :
		AG_Config(filesystem::read_file(model_name_configfile))
	{ }

}ag_config;